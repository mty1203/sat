import numpy as np
from sat.models.SATNMBase import SATBase


class NMPrototypeSAT(SATBase):

    def __init__(self, formula):
        super().__init__(formula)

    def create_qubo(self):
        for clause_index, clause in enumerate(self.formula):
            if list(np.sign(clause)) == [1, 1, 1]:
                self.add(clause[0], clause[0], self.clause_qubos[0][(0, 0)])
                self.add(clause[0], clause[1], self.clause_qubos[0][(0, 1)])
                self.add(clause[0], clause[2], self.clause_qubos[0][(0, 2)])
                self.add(clause[0], self.num_variables + clause_index + 1, self.clause_qubos[0][(0, 3)])
                self.add(clause[1], clause[1], self.clause_qubos[0][(1, 1)])
                self.add(clause[1], clause[2], self.clause_qubos[0][(1, 2)])
                self.add(clause[1], self.num_variables + clause_index + 1, self.clause_qubos[0][(1, 3)])
                self.add(clause[2], clause[2], self.clause_qubos[0][(2, 2)])
                self.add(clause[2], self.num_variables + clause_index + 1, self.clause_qubos[0][(2, 3)])
                self.add(self.num_variables + clause_index + 1, self.num_variables + clause_index + 1, self.clause_qubos[0][(3, 3)])

            elif list(np.sign(clause)) == [1, 1, -1]:
                self.add(clause[0], clause[0], self.clause_qubos[1][(0, 0)])
                self.add(clause[0], clause[1], self.clause_qubos[1][(0, 1)])
                self.add(clause[0], clause[2], self.clause_qubos[1][(0, 2)])
                self.add(clause[0], self.num_variables + clause_index + 1, self.clause_qubos[1][(0, 3)])
                self.add(clause[1], clause[1], self.clause_qubos[1][(1, 1)])
                self.add(clause[1], clause[2], self.clause_qubos[1][(1, 2)])
                self.add(clause[1], self.num_variables + clause_index + 1, self.clause_qubos[1][(1, 3)])
                self.add(clause[2], clause[2], self.clause_qubos[1][(2, 2)])
                self.add(clause[2], self.num_variables + clause_index + 1, self.clause_qubos[1][(2, 3)])
                self.add(self.num_variables + clause_index + 1, self.num_variables + clause_index + 1, self.clause_qubos[1][(3, 3)])

            elif list(np.sign(clause)) == [1, -1, -1]:
                self.add(clause[0], clause[0], self.clause_qubos[2][(0, 0)])
                self.add(clause[0], clause[1], self.clause_qubos[2][(0, 1)])
                self.add(clause[0], clause[2], self.clause_qubos[2][(0, 2)])
                self.add(clause[0], self.num_variables + clause_index + 1, self.clause_qubos[2][(0, 3)])
                self.add(clause[1], clause[1], self.clause_qubos[2][(1, 1)])
                self.add(clause[1], clause[2], self.clause_qubos[2][(1, 2)])
                self.add(clause[1], self.num_variables + clause_index + 1, self.clause_qubos[2][(1, 3)])
                self.add(clause[2], clause[2], self.clause_qubos[2][(2, 2)])
                self.add(clause[2], self.num_variables + clause_index + 1, self.clause_qubos[2][(2, 3)])
                self.add(self.num_variables + clause_index + 1, self.num_variables + clause_index + 1, self.clause_qubos[2][(3, 3)])

            else:
                self.add(clause[0], clause[0], self.clause_qubos[3][(0, 0)])
                self.add(clause[0], clause[1], self.clause_qubos[3][(0, 1)])
                self.add(clause[0], clause[2], self.clause_qubos[3][(0, 2)])
                self.add(clause[0], self.num_variables + clause_index + 1, self.clause_qubos[3][(0, 3)])
                self.add(clause[1], clause[1], self.clause_qubos[3][(1, 1)])
                self.add(clause[1], clause[2], self.clause_qubos[3][(1, 2)])
                self.add(clause[1], self.num_variables + clause_index + 1, self.clause_qubos[3][(1, 3)])
                self.add(clause[2], clause[2], self.clause_qubos[3][(2, 2)])
                self.add(clause[2], self.num_variables + clause_index + 1, self.clause_qubos[3][(2, 3)])
                self.add(self.num_variables + clause_index + 1, self.num_variables + clause_index + 1, self.clause_qubos[3][(3, 3)])

